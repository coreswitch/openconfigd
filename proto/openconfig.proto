// Copyright 2016 OpenConfigd Project.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package openconfig;

// The Command execution.
service Exec {
	rpc DoExec(ExecRequest) returns (ExecReply) {}
}

// Command message type.
enum ExecType {
	EXEC = 0;
	COMPLETE = 1;
	COMPLETE_TRAILING_SPACE = 2;
	COMPLETE_FIRST_COMMANDS = 3;
	COMPLETE_DYNAMIC = 4;
}

// Command reply format type.
enum ExecConentType {
	CONTENT_TEXT = 0;
	CONTENT_JSON = 1;
}

// The request message containing user input string.
message ExecRequest {
	ExecType type = 1;
	string mode = 2;
	uint32 privilege = 3;
	string line = 4;
	repeated string commands = 5;
	repeated string args = 6;
	ExecConentType content = 7;
}

// Command exec code.
enum ExecCode {
	SUCCESS = 0;
	NOMATCH = 1;
	INCOMPLETE = 2;
	AMBIGUOUS = 3;
	SHOW = 4;
	REDIRECT = 5;
	REDIRECT_SHOW = 6;
}

// The response message containing the completion with help.
message ExecReply {
	ExecCode code = 1;
	string lines = 2;
	string host = 3;
	uint32 port = 4;
	repeated string candidates = 5;
}

// The Command register.
service Register {
	rpc DoRegister(RegisterRequest) returns (RegisterReply) {}
	rpc DoRegisterModule(RegisterModuleRequest) returns (RegisterModuleReply) {}
}

// The request message for command definition.
message RegisterRequest {
	string name = 1;
	string module = 2;
	string mode = 3;
	string line = 4;
	uint32 privilege = 5;
	repeated string helps = 6;
	ExecCode code = 7;
}

// The response message for callback ID.
message RegisterReply {
	int32 callbackid = 1;
}

// The request message mode information.
message RegisterModuleRequest {
	string module = 1;
	string host = 2;
	string port = 3;
}

// The response message containing the callbackID for the mode change.
message RegisterModuleReply {
	int32 result = 1;
}

// The module exec
service ExecModule {
	rpc DoExecModule(ExecModuleRequest) returns (ExecModuleReply) {}
}

// The request message mode information.
message ExecModuleRequest {
	int32 callbackid = 1;
	repeated string args = 2;
}

// The response message containing the callbackID for the mode change.
message ExecModuleReply {
	int32 result = 1;
	string line = 2;
}

// Configuration service
enum ConfigType {
	SET = 0;
	DELETE = 1;
	VALIDATE_START = 2;
	VALIDATE_END = 3;
	VALIDATE_SUCCESS = 4;
	VALIDATE_FAILED = 5;
	COMMIT_START = 6;
	COMMIT_END = 7;
	SUBSCRIBE = 8;
	SUBSCRIBE_MULTI = 9;
	SUBSCRIBE_REQUEST = 10;
	JSON_CONFIG = 11;
  API_CALL_FINISHED = 12;
}

// Configuration
service Config {
	rpc DoConfig(stream ConfigRequest) returns (stream ConfigReply) {}
}

// Subscribe type.
enum SubscribeType {
	COMMAND = 0;
	JSON = 1;
}

message SubscribeRequest {
	SubscribeType type = 1;
	string path = 2;
}

message ConfigRequest {
	ConfigType type = 1;
	string module = 2;
	string host = 3;
	uint32 port = 4;
	SubscribeType subtype = 5;
	repeated string path = 6;
	repeated SubscribeRequest subscribe = 7;
}

message ConfigReply {
	int32 result = 1;
	ConfigType type = 2;
	repeated string path = 3;
	string json = 4;
}

// Show service.
message ShowRequest {
	string line = 1;
	bool json = 2;
}

message ShowReply {
	string str = 1;
}

service Show {
	rpc Show(ShowRequest) returns (stream ShowReply) {}
}
